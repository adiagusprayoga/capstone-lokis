# -*- coding: utf-8 -*-
"""Collaborative Filtering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1idFhfCURGpn875G1ezs3hkpUErL1OrbE

## Recomendation using Collaborative Filtering
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import os
import warnings
import tensorflow as tf
from keras.layers import Input, Embedding, Flatten, Dot, Dense, Concatenate
from keras.models import Model

from google.colab import files
uploaded = files.upload()

tourism = pd.read_csv('tourism_rating (1) (1).csv')

tourism.head()

tourism.shape

tourism.info()

"""## split data for training 80% and for test 20%"""

from sklearn.model_selection import train_test_split
train, test = train_test_split(tourism, test_size=0.2, random_state=42)

train.head()

test.head()

tourism['Place_Ratings'] = tourism['Place_Ratings'].astype(int)

tourism.info()

n_users = len(tourism.User_Id.unique())
n_users

n_tourisms = len(tourism.Place_Ratings.unique())
n_tourisms

n_tourisms = len(tourism.Place_Id.unique())
n_tourisms

"""## Nural Net

"""

# creating book embedding path
tourism_input = Input(shape=[1], name="Tourism-Input")
tourism_embedding = Embedding(n_tourisms+1, 5, name="Tourism-Embedding")(tourism_input)
tourism_vec = Flatten(name="Flatten-Tourism")(tourism_embedding)

# creating user embedding path
user_input = Input(shape=[1], name="User-Input")
user_embedding = Embedding(n_users+1, 5, name="User-Embedding")(user_input)
user_vec = Flatten(name="Flatten-Users")(user_embedding)

# concatenate features
conc = Concatenate()([tourism_vec, user_vec])

model2 = tf.keras.Sequential([
          Input(shape=[1], name="Tourism-Input"),
          Embedding(n_tourisms+1, 5, name="Tourism-Embedding"),
          #Flatten(name="Flatten-Tourism"),
          #Input(shape=[1], name="User-Input"),
          #Embedding(n_users+1, 5, name="User-Embedding"),
          Flatten(name="Flatten-Users"),
          #Concatenate()([tourism_vec, user_vec]),
          tf.keras.layers.Dense(128, activation='relu'),
          tf.keras.layers.Dense(64, activation='relu'),
          tf.keras.layers.Dense(1),
])

model2.compile(loss=tf.keras.losses.BinaryCrossentropy(from_logits=True),
              optimizer=tf.keras.optimizers.Adam(1e-4),
              metrics=['accuracy'])

# creating book embedding path
tourism_input = Input(shape=[1], name="Tourism-Input")
tourism_embedding = Embedding(n_tourisms+1, 5, name="Tourism-Embedding")(tourism_input)
tourism_vec = Flatten(name="Flatten-Tourism")(tourism_embedding)

# creating user embedding path
user_input = Input(shape=[1], name="User-Input")
user_embedding = Embedding(n_users+1, 5, name="User-Embedding")(user_input)
user_vec = Flatten(name="Flatten-Users")(user_embedding)

# concatenate features
conc = Concatenate()([tourism_vec, user_vec])

# add fully-connected-layers
fc1 = Dense(128, activation='relu')(conc)
fc2 = Dense(64, activation='relu')(fc1)
out = Dense(1)(fc2)

# Create model and compile it
model = Model([user_input, tourism_input], out)
model.compile('adam', 'mean_squared_error')

model.summary()

import os
from keras.models import load_model

if os.path.exists('regression_model2.h5'):
    model2 = load_model('regression_model2.h5')
else:
    history = model.fit([train.User_Id, train.Place_Id], train.Place_Ratings, epochs=5, verbose=1)
    model2.save('regression_model2.h5')

plt.plot(history.history['loss'])
plt.xlabel("Epochs")
plt.ylabel("Training Error")

model.evaluate([test.User_Id, test.Place_Id], test.Place_Ratings)

model.save('recommendation_rating_model.h5')

id_place = range(1,20)

# Creating dataset for making recommendations for the first user
tourism_data = np.array(list(set(tourism.Place_Id)))
tourism_data[:10]

id_user = 3

user = np.array([id_user for i in range(len(tourism_data))])
user[:10]

predictions = model.predict([user, tourism_data])

predictions = np.array([a[0] for a in predictions])

recommended_tourism_ids = (-predictions).argsort()[:10]

recommended_tourism_ids

# print predicted scores
predictions[recommended_tourism_ids]