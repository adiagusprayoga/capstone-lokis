# -*- coding: utf-8 -*-
"""Clustering Wilayah JABODETABEK_.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QKEQSsuAq-TBXFi0zX_kYNLAzidPO1aq

### Declaration of Library
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import pandas as pd
import numpy as np
from nltk.corpus import stopwords
from sklearn.metrics.pairwise import linear_kernel
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from nltk.tokenize import RegexpTokenizer
import re
import string
import random
from PIL import Image
import requests
from io import BytesIO
import matplotlib.pyplot as plt
# %matplotlib inline

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA
from sklearn.preprocessing import OneHotEncoder
from scipy.spatial import distance_matrix
from sklearn.cluster import AgglomerativeClustering
from scipy import ndimage
from scipy.cluster import hierarchy
from scipy.spatial import distance_matrix
from sklearn import manifold, datasets
import matplotlib.cm as cm
# %matplotlib inline

"""### Upload dataset"""

## Code ambil melalui file pribadi
from google.colab import files
uploaded = files.upload()

## Load dataset
## Load Dataset ulang nama file tourism

tourism = pd.read_csv('lokis (1).csv')
tourism

tourism.mean()

tourism.fillna(tourism.mean(),inplace=True)

tourism.isna().sum()

"""### Jakarta"""

jakarta_city = tourism[tourism['city']=='Jakarta']

#tourism = pd.get_dummies(jakarta_city, columns=["Category"])
tourism_jakarta = pd.get_dummies(jakarta_city, columns=["city"])

tourism

"""###select the feature which gonna use to build clustering"""

featureset_jakarta = tourism_jakarta[['price', 'rating']]

## cek matriks
from sklearn.preprocessing import MinMaxScaler
x = featureset_jakarta.values #returns a numpy array
min_max_scaler = MinMaxScaler()
feature_mtx = min_max_scaler.fit_transform(x)
feature_mtx [0:5]

dist_matrix = distance_matrix(feature_mtx,feature_mtx)
print(dist_matrix)

"""#### using kmeans with sklear"""

agglom = KMeans(n_clusters = 10)
agglom.fit(feature_mtx)
agglom.labels_

## code error
#pd.set_option("max_columns", None) #Showing only two columns
#pd.set_option("max_rows", None)

tourism_jakarta['cluster_'] = agglom.labels_
tourism_jakarta

#import matplotlib.cm as cm
#n_clusters = max(agglom.labels_)+1
#colors = cm.rainbow(np.linspace(0, 1, n_clusters))
#cluster_labels = list(range(0, n_clusters))

# Create a figure of size 6 inches by 4 inches.
#plt.figure(figsize=(16,14))

#for color, label in zip(colors, cluster_labels):
#    subset = tourism[tourism.cluster_ == label]
#    for i in subset.index:
#            plt.text(subset.Price[i], subset.Time_Minutes[i],str(subset['model'][i]), rotation=25)
#    plt.scatter(subset.Price, subset.Time_Minutes, s= subset.price*10, c=color, label='cluster'+str(label),alpha=0.5)
#    plt.scatter(subset.horsepow, subset.mpg)
#plt.legend()
#plt.title('Clusters')
#plt.xlabel('horsepow')
#plt.ylabel('mpg')

output = plt.scatter(feature_mtx[:,0], feature_mtx[:,1], s = 100, c = tourism_jakarta.cluster_, marker = "o", alpha = 1, )
centers = agglom.cluster_centers_
plt.scatter(centers[:,0], centers[:,1], c='red', s=200, alpha=1 , marker="o");
plt.title("Hasil Klustering K-Means")
plt.colorbar (output)
plt.show()

"""clustering diatas masih menggunakan variabel (price/harga tempat wisata dan rating) *bukan* time_minutes/ jarak tempuh

### Bogor
"""

bogor_city = tourism[tourism['city']=='Bogor']

#tourism = pd.get_dummies(jakarta_city, columns=["Category"])
tourism_bogor = pd.get_dummies(bogor_city, columns=["city"])

"""### select the feature which gonna use to build clustering

"""

tourism_bogor

featureset_bogor = tourism_bogor[['price', 'time_minutes']]

from sklearn.preprocessing import MinMaxScaler
x = featureset_bogor.values #returns a numpy array
min_max_scaler = MinMaxScaler()
feature_mtx = min_max_scaler.fit_transform(x)
feature_mtx [0:5]

"""### using kmeans with sklear"""

agglom = KMeans(n_clusters = 10)
agglom.fit(feature_mtx)
agglom.labels_

tourism_bogor['cluster_'] = agglom.labels_
tourism_bogor

output = plt.scatter(feature_mtx[:,0], feature_mtx[:,1], s = 100, c = tourism_bogor.cluster_, marker = "o", alpha = 1, )
centers = agglom.cluster_centers_
plt.scatter(centers[:,0], centers[:,1], c='red', s=200, alpha=1 , marker="o");
plt.title("Hasil Klustering K-Means")
plt.colorbar (output)
plt.show()

"""### Depok"""

depok_city = tourism[tourism['city']=='Depok']

#tourism = pd.get_dummies(jakarta_city, columns=["Category"])
tourism_depok = pd.get_dummies(depok_city, columns=["city"])

tourism_depok

"""### select the feature which gonna use to build clustering"""

featureset_depok = tourism_depok[['price', 'time_minutes']]

from sklearn.preprocessing import MinMaxScaler
x = featureset_depok.values #returns a numpy array
min_max_scaler = MinMaxScaler()
feature_mtx = min_max_scaler.fit_transform(x)
feature_mtx [0:5]

dist_matrix = distance_matrix(feature_mtx,feature_mtx)
print(dist_matrix)

"""### using kmeans with sklear"""

agglom = KMeans(n_clusters = 10)
agglom.fit(feature_mtx)
agglom.labels_

tourism_depok['cluster_'] = agglom.labels_
tourism_depok

output = plt.scatter(feature_mtx[:,0], feature_mtx[:,1], s = 100, c = tourism_depok.cluster_, marker = "o", alpha = 1, )
centers = agglom.cluster_centers_
plt.scatter(centers[:,0], centers[:,1], c='red', s=200, alpha=1 , marker="o");
plt.title("Hasil Klustering K-Means")
plt.colorbar (output)
plt.show()

"""### Tanggerang"""

tangerang_city = tourism[tourism['city']=='Tangerang']

#tourism = pd.get_dummies(jakarta_city, columns=["Category"])
tourism_tangerang= pd.get_dummies(tangerang_city, columns=["city"])

tourism_tangerang

"""### select the feature which gonna use to build clustering"""

featureset_tangerang = tourism_tangerang[['price', 'time_minutes']]

from sklearn.preprocessing import MinMaxScaler
x = featureset_tangerang.values #returns a numpy array
min_max_scaler = MinMaxScaler()
feature_mtx = min_max_scaler.fit_transform(x)
feature_mtx [0:5]

dist_matrix = distance_matrix(feature_mtx,feature_mtx)
print(dist_matrix)

"""### using kmeans with sklear"""

agglom = KMeans(n_clusters = 10)
agglom.fit(feature_mtx)
agglom.labels_

tourism_tangerang['cluster_'] = agglom.labels_
tourism_tangerang

output = plt.scatter(feature_mtx[:,0], feature_mtx[:,1], s = 100, c = tourism_tangerang.cluster_, marker = "o", alpha = 1, )
centers = agglom.cluster_centers_
plt.scatter(centers[:,0], centers[:,1], c='red', s=200, alpha=1 , marker="o");
plt.title("Hasil Klustering K-Means")
plt.colorbar (output)
plt.show()

"""### Bekasi"""

bekasi_city = tourism[tourism['city']=='Bekasi']

#tourism = pd.get_dummies(jakarta_city, columns=["Category"])
tourism_bekasi = pd.get_dummies(bekasi_city, columns=["city"])

tourism_bekasi

featureset_bekasi = tourism_bekasi[['price', 'time_minutes']]

from sklearn.preprocessing import MinMaxScaler
x = featureset_bekasi.values #returns a numpy array
min_max_scaler = MinMaxScaler()
feature_mtx = min_max_scaler.fit_transform(x)
feature_mtx [0:5]

dist_matrix = distance_matrix(feature_mtx,feature_mtx)
print(dist_matrix)

"""### using kmeans with sklear"""

agglom = KMeans(n_clusters = 10)
agglom.fit(feature_mtx)
agglom.labels_

tourism_bekasi['cluster_'] = agglom.labels_
tourism_bekasi

output = plt.scatter(feature_mtx[:,0], feature_mtx[:,1], s = 100, c = tourism_bekasi.cluster_, marker = "o", alpha = 1, )
centers = agglom.cluster_centers_
plt.scatter(centers[:,0], centers[:,1], c='red', s=200, alpha=1 , marker="o");
plt.title("Hasil Klustering K-Means")
plt.colorbar (output)
plt.show()