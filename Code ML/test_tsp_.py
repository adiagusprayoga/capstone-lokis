# -*- coding: utf-8 -*-
"""test_tsp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ctAxNqgXKu8sc-yC3jWygg2gJcbBiMXi
"""

pip install scikit-opt

pip install py2opt

pip install numpy

!wget http://webhotel4.ruc.dk/~keld/research/LKH-3/LKH-3.0.9.tgz

!tar xvfz LKH-3.0.9.tgz

cd LKH-3.0.9

!make

!sudo cp LKH /usr/local/bin

pip install lkh --upgrade

cd ..

pip install ortools

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.spatial import distance_matrix

plt.rcParams['axes.facecolor'] = '#ededed'

from google.colab import files
uploaded = files.upload()

data = open('ch130.tsp','r')

read = data.read()

cord = [list(map(float,i.split())) for i in read.split('\n')[6:-2]]

cord = np.array(cord)[:,1:]

matrix = distance_matrix(cord, cord)

num_points = cord.shape[0]
num_points

def cal_total_distance(route):
    '''The objective
     function. input routine, return total distance.
    cal_total_distance(np.arange(num_points))
    '''
    route = np.array(route)
    num_points, = route.shape
    return sum([matrix[route[i % num_points], route[(i + 1) % num_points]] for i in range(num_points)])

def plot_tsp(cord, best_points):
  best_points_ = np.concatenate([best_points, [best_points[0]]])
  best_points_coordinate = cord[best_points_, :]
  plt.plot(best_points_coordinate[:, 0], best_points_coordinate[:, 1],
           marker='o', markerfacecolor='b', color='c', linestyle='-')
  plt.title('Total Distance = '+str(cal_total_distance(best_points)))

from sko.SA import SA_TSP
from matplotlib.ticker import FormatStrFormatter

sa_tsp = SA_TSP(func=cal_total_distance, x0=range(num_points), T_max=100, T_min=1, L=10*num_points)

best_points, best_distance = sa_tsp.run()
print(best_distance)

fig, ax = plt.subplots(1, 2, figsize=(16,6))

best_points_ = np.concatenate([best_points, [best_points[0]]])
best_points_coordinate = cord[best_points_, :]
ax[0].plot(sa_tsp.best_y_history)
ax[0].set_xlabel("Iteration")
ax[0].set_ylabel("Distance")
ax[1].plot(best_points_coordinate[:, 0], best_points_coordinate[:, 1],
           marker='o', markerfacecolor='b', color='c', linestyle='-')
plt.show()

import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

best_x_history = sa_tsp.best_x_history
best_y_history = sa_tsp.best_y_history

fig2, ax2 = plt.subplots(1, 1)
ax2.set_title('title', loc='center')
line = ax2.plot(cord[:, 0], cord[:, 1],
                marker='o', markerfacecolor='b', color='c', linestyle='-')
ax2.xaxis.set_major_formatter(FormatStrFormatter('%.3f'))
ax2.yaxis.set_major_formatter(FormatStrFormatter('%.3f'))
ax2.set_xlabel("Longitude")
ax2.set_ylabel("Latitude")
plt.ion()
p = plt.show()


def update_scatter(frame):
    ax2.set_title('Iter = ' + str(frame)+', Total Length ='+ str(best_y_history[frame]))
    points = best_x_history[frame]
    points = np.concatenate([points, [points[0]]])
    point_coordinate = cord[points, :]
    plt.setp(line, 'xdata', point_coordinate[:, 0], 'ydata', point_coordinate[:, 1])
    return line


ani = FuncAnimation(fig2, update_scatter, blit=True, interval=30, frames=len(best_x_history))
plt.show()

ani.save('sa_tsp.gif', writer='pillow')

import tsplib95
import lkh
import requests

file_path = 'ch130.tsp'

with open(file_path, 'r') as file:
    problem_str = file.read()

problem = tsplib95.parse(problem_str)

solver_path = 'LKH-3.0.9/LKH'
slkh = lkh.solve(solver_path, problem=problem, max_trials=10000, runs=10)

plot_tsp(cord, np.array(slkh[0])-1)

from py2opt.routefinder import RouteFinder

cities_names = range(num_points)
dist_mat = matrix
route_finder = RouteFinder(dist_mat, cities_names)
best_distance, best_route = route_finder.solve()

plot_tsp(cord, best_route)

from ortools.constraint_solver import pywrapcp, routing_enums_pb2

manager = pywrapcp.RoutingIndexManager(len(matrix),1,0)
routing = pywrapcp.RoutingModel(manager)

def distance_callback(from_index, to_index):
    """Returns the distance between the two nodes."""
    # Convert from routing variable Index to distance matrix NodeIndex.
    from_node = manager.IndexToNode(from_index)
    to_node = manager.IndexToNode(to_index)
    return matrix[from_node][to_node]

transit_callback_index = routing.RegisterTransitCallback(distance_callback)

routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

search_parameters = pywrapcp.DefaultRoutingSearchParameters()
search_parameters.first_solution_strategy = (
    routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

def solve(manager, routing, solution):
    """Prints solution on console."""
    length = solution.ObjectiveValue()
    index = routing.Start(0)
    route = []
    while not routing.IsEnd(index):
        route.append(manager.IndexToNode(index))
        index = solution.Value(routing.NextVar(index))
    return {'route':route + [0], 'length':length}

solution = routing.SolveWithParameters(search_parameters)
output = solve(manager, routing, solution)

plot_tsp(cord, output['route'][:-1])