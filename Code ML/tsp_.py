# -*- coding: utf-8 -*-
"""tsp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UlL4gG7I3Wm1De7Dsa3Lyegk_puzqh-T
"""

pip install ortools

pip install googlemaps

import numpy as np
import pandas as pd
import googlemaps
from datetime import datetime
from ortools.constraint_solver import pywrapcp, routing_enums_pb2

def create_data_model():
    """Stores the data for the problem."""
    data = {}
    data['distance_matrix'] = [
        [0, 1745, 1524, 831, 1240, 959, 2596, 403, 1589, 1374, 357, 579],
        [1745, 0, 355, 920, 803, 1737, 851, 1858, 262, 940, 1453, 1260],
        [1524, 355, 0, 700, 862, 1395, 1123, 1584, 466, 1056, 1280, 987],
        [831, 920, 700, 0, 663, 1021, 1769, 949, 796, 879, 586, 371],
        [1240, 803, 862, 663, 0, 168, 1551, 1765, 547, 225, 887, 999],
        [959, 1737, 1395, 1021, 168, 0, 2493, 678, 1724, 1891, 1114, 701],
        [2596, 851, 1123, 1769, 1551, 2493, 0, 269, 1038, 1605, 2300, 2099],
        [403, 1858, 1584, 949, 1765, 678, 269, 0, 1744, 1645, 653, 600],
        [1589, 262, 466, 796, 547, 1724, 1038, 1744, 0, 679, 1272, 1162],
        [1374, 940, 1056, 879, 225, 1891, 1605, 1645, 679, 0, 1017, 1200],
        [357, 1453, 1280, 586, 887, 1114, 2300, 653, 1272, 1017, 0, 504],
        [579, 1260, 987, 371, 999, 701, 2099, 600, 1162, 1200, 504, 0],
    ]  # yapf: disable
    #data['distance_matrix'] = matrix
    data['num_vehicles'] = 1
    data['depot'] = 0
    return data

data = create_data_model()
manager = pywrapcp.RoutingIndexManager(len(data['distance_matrix']),
                                       data['num_vehicles'], data['depot'])
routing = pywrapcp.RoutingModel(manager)

def distance_callback(from_index, to_index):
    """Returns the distance between the two nodes."""
    # Convert from routing variable Index to distance matrix NodeIndex.
    from_node = manager.IndexToNode(from_index)
    to_node = manager.IndexToNode(to_index)
    return data['distance_matrix'][from_node][to_node]

transit_callback_index = routing.RegisterTransitCallback(distance_callback)

routing.SetArcCostEvaluatorOfAllVehicles(transit_callback_index)

search_parameters = pywrapcp.DefaultRoutingSearchParameters()
search_parameters.first_solution_strategy = (
    routing_enums_pb2.FirstSolutionStrategy.PATH_CHEAPEST_ARC)

def print_solution(manager, routing, solution):
    """Prints solution on console."""
    length = solution.ObjectiveValue()
    index = routing.Start(0)
    route = []
    while not routing.IsEnd(index):
        route.append(manager.IndexToNode(index))
        index = solution.Value(routing.NextVar(index))
    return {'route':route + [0], 'length':length}

# Commented out IPython magic to ensure Python compatibility.
# %%time
# solution = routing.SolveWithParameters(search_parameters)
# a = print_solution(manager, routing, solution)

a

import googlemaps as gmapsapi

gmaps = gmapsapi.Client(key='AIzaSyCkwLjv4XhHvao0gtyd7lsAv5crMrqpTUE')

# Geocoding an address
geocode_result = gmaps.geocode('1600 Amphitheatre Parkway, Mountain View, CA')

# Look up an address with reverse geocoding
reverse_geocode_result = gmaps.reverse_geocode((40.714224, -73.961452))

# Request directions via public transit
now = datetime.now()
directions_result = gmaps.directions("Sydney Town Hall",
                                     "Parramatta, NSW",
                                     mode="transit",
                                     departure_time=now)

# Validate an address with address validation
addressvalidation_result =  gmaps.addressvalidation(['1600 Amphitheatre Pk'],
                                                    regionCode='US',
                                                    locality='Mountain View',
                                                    enableUspsCass=True)

req = {'destination' : '926+E+McLemore+Ave+Memphis+TN',
       'origin' : '926+E+McLemore+Ave+Memphis+TN',
       'waypoints' : ['3610+Hacks+Cross+Rd+Memphis+TN', # depot
                       '1921+Elvis+Presley+Blvd+Memphis+TN',
                       '149+Union+Avenue+Memphis+TN',
                       '1034+Audubon+Drive+Memphis+TN',
                       '1532+Madison+Ave+Memphis+TN',
                       '706+Union+Ave+Memphis+TN',
                       '3641+Central+Ave+Memphis+TN'
                      ],
       'optimize_waypoints' : True}

now = datetime.now()
lat = "-27.0000"
lng = "133.0000"
directions_result = gmaps.directions(**req)

sums = 0
for i in directions_result[0]['legs']:
  print(i['start_address'].ljust(70),i['end_address'])
  sums+=i['distance']['value']

directions_result[0]['legs']

from __future__ import division
from __future__ import print_function
import requests
import json
import urllib

def create_data():
  """Creates the data."""
  data = {}
  data['API_key'] = 'AIzaSyCkwLjv4XhHvao0gtyd7lsAv5crMrqpTUE'
  data['addresses'] = ['3610+Hacks+Cross+Rd+Memphis+TN', # depot
                       '1921+Elvis+Presley+Blvd+Memphis+TN',
                       '149+Union+Avenue+Memphis+TN',
                       '1034+Audubon+Drive+Memphis+TN',
                       '1532+Madison+Ave+Memphis+TN',
                       '706+Union+Ave+Memphis+TN',
                       '3641+Central+Ave+Memphis+TN',
                       '926+E+McLemore+Ave+Memphis+TN',
                      ]
  return data

data = create_data()

dist = gmaps.distance_matrix(origins=data['addresses'][0], destinations=data['addresses'])

dist['rows'][0]['elements'][0]['distance']['value']

def create_matrix(data):
  outs = []
  for i in data['rows']:
    out = []
    for j in i['elements']:
      out.append(j['distance']['value'])
    outs.append(out)
  return outs

matrix = create_matrix(dist)

addressess= ['3610+Hacks+Cross+Rd+Memphis+TN', # depot
             '1921+Elvis+Presley+Blvd+Memphis+TN',
             '149+Union+Avenue+Memphis+TN',
             '1034+Audubon+Drive+Memphis+TN',
             '1532+Madison+Ave+Memphis+TN',
             '706+Union+Ave+Memphis+TN',
             '3641+Central+Ave+Memphis+TN',
             '926+E+McLemore+Ave+Memphis+TN',
             ]

dist['destination_addresses']

matrix

a = gmaps.places('monumen nasional')

a['results'][0]

{"distance_matrix" : [[0, 1745, 1524, 831, 1240, 959, 2596, 403, 1589, 1374, 357, 579],[1745, 0, 355, 920, 803, 1737, 851, 1858, 262, 940, 1453, 1260],[1524, 355, 0, 700, 862, 1395, 1123, 1584, 466, 1056, 1280, 987],[831, 920, 700, 0, 663, 1021, 1769, 949, 796, 879, 586, 371],[1240, 803, 862, 663, 0, 168, 1551, 1765, 547, 225, 887, 999],[959, 1737, 1395, 1021, 168, 0, 2493, 678, 1724, 1891, 1114, 701],[2596, 851, 1123, 1769, 1551, 2493, 0, 269, 1038, 1605, 2300, 2099],[403, 1858, 1584, 949, 1765, 678, 269, 0, 1744, 1645, 653, 600],[1589, 262, 466, 796, 547, 1724, 1038, 1744, 0, 679, 1272, 1162],[1374, 940, 1056, 879, 225, 1891, 1605, 1645, 679, 0, 1017, 1200],[357, 1453, 1280, 586, 887, 1114, 2300, 653, 1272, 1017, 0, 504],[579, 1260, 987, 371, 999, 701, 2099, 600, 1162, 1200, 504, 0]]}